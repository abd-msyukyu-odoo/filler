recup le numero de player avant la premiere carte

ajouter la couleur de contact pour les ranges ?

-> les ranges doivent contenir les coordonnees (sans blague)

retirer le flag -Wno-unused-function

ydecode player -> read line

yread input -> read bloc
	yread plateau -> read line + ydecode size plateau
	read line >< yignore line
	read y * (1 + x + (3 * min(x, 1000)) + (4 * min(x - 1000, 9000)) + ...
	ydecode map
	yread piece -> read line + ydecode size piece
	yread y * (1 + x)
	ydecode crop + ydecode piece

a scorer : 	atteindre un mur pour la premiere fois, proche de l'ennemi (mid to high) / securiser une surface
			bloquer une diagonale (mid to high)
			reduire le perimetre de l'ennemi (mid to high)
			remplir un trou interne (low)
			se rapprocher de l'ennemi (high to zero (upon contact))
			

2 segfault :	decode pc (decode_input)
				yrng_h_hi (ynext_hp) (ynext_pc_pos)

-> 

pour chaque placement de piece, parcourir le contour de la piece
pour chaque case du contour, calculer la distance avec l'ennemi
faire la somme de ces distances
garder le placement de piece qui minimise la somme des distances
-> condition : avoir un point de depart secondaire pour le contour de la piece (autre que celui utilise pour le placement de la piece)
-> creer une structure "point de depart", changer la structure de player et de piece
-> changer la signature des fonctions relatives au point de depart pour se baser sur un point de depart externe


>>>>>>>>>>>optionnel :
-> fusion de la nouvelle piece avec l'ancienne map (limiter le nombre de malloc/free)

>>>>>>>>>>>indispensable :
-> exception a la regle du plus "proche de l'ennemi" si :
	ne touche pas l'ennemi (ambigu, a preciser) -> aucun rayon du contour ne vise l'ennemi directement
		-> ajouter une limite de distance a cette regle ? -> rare
	
-> evaluer a chaque tour si l'ennemi possede une frontiere de la taille de la map
-> dans ce cas, prendre en compte les murs de la map dans la definition du U



>>>>>>>>>>>>>>>>>>>>>>>>>
fusion : lors du placement de notre piece, on effectue la fusion
lecture de la carte reduite a une comparaison avec la carte actuelle, on recree
la piece, ensuite meme fusion que pour le play, mais pour l'ennemi
(il faut toujours lire la piece) -> au final : moins de realloc


algo de distance : 1 a 10 non dichotomique (contact), ensuite dichotomique



methodologie de fusion : 


parcourir les elements pleins de la map de la piece
pour chacun d'eux : 
	se mettre sur la case concernee sur la map finale
	si la couleur est la meme que nous
		return
	changer sa couleur
	regarder dans les 4 axes (2 directions simultanement)
	si 2x ennemi
		creer un nouveau pointeur de longueur 1 a cette case
	si 2x allie
		prendre le pointeur en x minimum, ajuster la longueur a la fin de celui
		...du x maximum, parcourir tous les elements sur l'axe dont le pointeur est
		...supprime (y compris cette case]), ajouter le pointeur en x minimum
	si 2x vide
		creer un nouveau pointeur de longueur 1 a cette case
		ajuster le pointeur vide en x minimum (longueur)
		creer un nouveau pointeur en x maximum jusqu'a l'ancienne longueur,
		...parcourir tous les points et ajouter ce pointeur
	si 1x vide et ennemi
		ajuster la fin ou le debut du pointeur vide
		creer un nouveau pointeur de longueur 1 a cette case
	si 1x vide et allie
		ajuster la fin ou le debut du pointeur vide
		ajuster la fin ou le debut du pointeur allie
	si 1x allie et ennemi
		ajuster la fin ou le debut du pointeur allie